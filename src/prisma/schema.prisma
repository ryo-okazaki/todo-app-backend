// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  email     String   @unique
  password  String
  status    Int      @db.SmallInt
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  todos              Todo[]
  verificationToken  VerificationToken[]
  passwordResetToken PasswordResetToken[]

  @@map("users")
}

model VerificationToken {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique @map("user_id")
  token     String
  status    Int      @db.SmallInt
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("verification_tokens")
}

model Todo {
  id          Int       @id @default(autoincrement())
  userId      Int       @map("user_id")
  title       String    @db.VarChar(255)
  description String?
  startDate   DateTime? @map("start_date")
  endDate     DateTime? @map("end_date")
  completed   Boolean   @default(false)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  images TodoImage[]

  @@map("todos")
}

model TodoImage {
  id        Int      @id @default(autoincrement())
  todoId    Int      @map("todo_id")
  imageUrl  String   @map("image_url")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  todo Todo @relation(fields: [todoId], references: [id], onDelete: Cascade)

  @@map("todo_images")
}
